// Mocks generated by Mockito 5.3.2 from annotations
// in macska_match/test/random_cat_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:macska_match/domain/interactors/cat_interactor.dart' as _i3;
import 'package:macska_match/domain/model/cat.dart' as _i2;
import 'package:macska_match/domain/model/cat_uri_model.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCat_0 extends _i1.SmartFake implements _i2.Cat {
  _FakeCat_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CatInteractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockCatInteractor extends _i1.Mock implements _i3.CatInteractor {
  @override
  _i4.Future<_i2.Cat> getRandomCat() => (super.noSuchMethod(
        Invocation.method(
          #getRandomCat,
          [],
        ),
        returnValue: _i4.Future<_i2.Cat>.value(_FakeCat_0(
          this,
          Invocation.method(
            #getRandomCat,
            [],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Cat>.value(_FakeCat_0(
          this,
          Invocation.method(
            #getRandomCat,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Cat>);
  @override
  _i4.Future<dynamic> likeCat(_i2.Cat? cat) => (super.noSuchMethod(
        Invocation.method(
          #likeCat,
          [cat],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> dislikeCat(_i2.Cat? cat) => (super.noSuchMethod(
        Invocation.method(
          #dislikeCat,
          [cat],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<Iterable<_i5.CatUriModel>> getLikedCatUris() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLikedCatUris,
          [],
        ),
        returnValue:
            _i4.Future<Iterable<_i5.CatUriModel>>.value(<_i5.CatUriModel>[]),
        returnValueForMissingStub:
            _i4.Future<Iterable<_i5.CatUriModel>>.value(<_i5.CatUriModel>[]),
      ) as _i4.Future<Iterable<_i5.CatUriModel>>);
  @override
  _i4.Future<Iterable<_i5.CatUriModel>> getDislikedCatUris() =>
      (super.noSuchMethod(
        Invocation.method(
          #getDislikedCatUris,
          [],
        ),
        returnValue:
            _i4.Future<Iterable<_i5.CatUriModel>>.value(<_i5.CatUriModel>[]),
        returnValueForMissingStub:
            _i4.Future<Iterable<_i5.CatUriModel>>.value(<_i5.CatUriModel>[]),
      ) as _i4.Future<Iterable<_i5.CatUriModel>>);
  @override
  _i4.Future<_i2.Cat> getCat(_i5.CatUriModel? catUri) => (super.noSuchMethod(
        Invocation.method(
          #getCat,
          [catUri],
        ),
        returnValue: _i4.Future<_i2.Cat>.value(_FakeCat_0(
          this,
          Invocation.method(
            #getCat,
            [catUri],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Cat>.value(_FakeCat_0(
          this,
          Invocation.method(
            #getCat,
            [catUri],
          ),
        )),
      ) as _i4.Future<_i2.Cat>);
  @override
  _i4.Future<dynamic> deleteCat(_i5.CatUriModel? catUri) => (super.noSuchMethod(
        Invocation.method(
          #deleteCat,
          [catUri],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
}
